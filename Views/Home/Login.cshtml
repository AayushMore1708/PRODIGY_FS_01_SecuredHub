@model SecuredHub.Models.User
@{
    //Layout = null; // Disable layout for this view
        ViewData["Title"] = "Login Page";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Custom CSS for gradient background -->
    <style>
        body {
            background: linear-gradient(90deg, #00d2ff 0%, #3a7bd5 100%);
            height: 100vh;
        }

       .form-container {
            background-color: #fff;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
            max-width: 700px; /* Limit maximum width */
        }

        /* Style for form labels */
       .form-label {
            font-weight: bold;
        }

        /* Style for submit button */
       .btn-submit {
            width: 100%;
        }

       .spinner-border {
            display: none;
        }
    </style>
</head>
<body>

    <div class="container form-container">
        <h2 class="text-center mb-4">Login</h2>
        <form id="loginForm" asp-action="Login" method="post">

            <div class="form-group mb-3">
                <label asp-for="UserName" class="form-label">Username :-</label>
                <input asp-for="UserName" class="form-control" id="UserName" />
                <span asp-validation-for="UserName" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Password" class="form-label">Password :-</label>
                <input asp-for="Password" class="form-control" id="Password" type="password" />
                <span asp-validation-for="Password" class="text-danger"></span>
            </div>
            <button type="submit" class="btn btn-primary btn-submit" onclick="submitForm(event)">
                <span class="spinner-border spinner-border-sm" id="spinner"></span>
                <span id="buttonText">Login</span>
            </button>
        </form>
    </div>

    <!-- Bootstrap JS and dependencies -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        function submitForm(event) {
            event.preventDefault(); // Prevent the default form submission
            
            const submitButton = document.querySelector('.btn-submit');
            const spinner = document.getElementById('spinner');
            const buttonText = document.getElementById('buttonText');

            // Show the spinner and change the button text
            spinner.style.display = 'inline-block';
            buttonText.textContent = 'Logging in...';

            // Retrieve form data
            const formData = new FormData(document.getElementById('loginForm'));

            // Prepare request headers
            const headers = new Headers();
            headers.append('Content-Type', 'application/json');

            // Convert form data to JSON
            const jsonData = {};
            for (const [key, value] of formData.entries()) {
                jsonData[key] = value;
            }

            // Display alert with request headers
            // window.alert("Request Headers:\n" + JSON.stringify(jsonData));

            fetch('/Auth/Login', {
                method: 'POST',
                body: JSON.stringify(jsonData),
                headers: headers
            })
           .then(response => {
                // Check if the response was successful
                if (response.ok) {
                    // Hide the spinner and reset the button text
                    spinner.style.display = 'none';
                    buttonText.textContent = 'Login';
                    // Redirect to dashboard or home page
                    window.location.href = '/Home/Dashboard';
                } else {
                    
                    // If the response was not successful, show an error message
                    response.json().then(data => {
                        alert("Error: " + data.message);
                    });
                    // Hide the spinner and reset the button text
                    spinner.style.display = 'none';
                    buttonText.textContent = 'Login';
                }
            })
          .catch(error => {
                console.log("Error: " + error);
                // If there's a network error, show an error message
                alert("Network error: " + error);
                response.json().then(data => {
                        alert("Error: " + data.message);
                    });
                // Hide the spinner and reset the button text
                spinner.style.display = 'none';
                buttonText.textContent = 'Login';
            });
}
    </script>

</body>
</html>